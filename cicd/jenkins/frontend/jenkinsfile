pipeline {
    agent any
    
    environment {
        IS_FRONTEND_CHANGED = 'false'
    }
    
    // 파이프라인의 실행 단계 정의
    stages {

        // 1. 깃 클론
        stage('git clone') {
                steps {
                        git branch: 'develop', url: 'https://github.com/beyond-sw-camp/be02-fin-BuildUp-KMS'
                }
        }
        
        stage('Check for Frontend Changes') {
            steps {
                script {
                    // Checking if there are any changes in the frontend directory
                    def changedFiles = sh(script: "git diff --name-only HEAD^ HEAD", returnStdout: true).trim().split('\n')
                    IS_FRONTEND_CHANGED = changedFiles.any { it.startsWith("frontend/") }.toString()
                    echo "Frontend changes: ${IS_FRONTEND_CHANGED}"
                }
            }
        }


        // 2. 프로젝트에 필요한 패키지 설치
        stage('Install Dependencies') {
            when {
                // Only run this stage if frontend changes are detected
                expression { IS_FRONTEND_CHANGED == 'true' }
            }
            
            steps {
                script {
                    dir('frontend') {
                        sh 'npm install'
                    }
                }
            }
        }
        
        // 3. 기존에 생성되어 있는 dist 폴더 삭제
        stage('Delete Exist file') {
            steps {
                script {
                    sh 'rm -rf /var/lib/jenkins/workspace/bootshelf-frontend/frontend/dist'
                }
            }
        }
        
        // 4. frontend 폴더로 이동해서 새로운 프로젝트 빌드
        stage('Build') {
            when {
                expression { IS_FRONTEND_CHANGED == 'true' }
            }
            
            steps {
                script {
                    dir('frontend') {
                        sh 'npm run build'                        
                    }
                }
            }
            post {
                // 테스트 코드 성공 시 슬랙 채널 ( #buildup-dev ) 로 성공 알림 발송
                success {
                    slackSend(
                        channel: '#buildup-dev',
                        color: 'good',
                        message: "Backend hyungdoyou/bootshelf-be:2.${BUILD_NUMBER} test success.",
                        teamDomain: 'beyondsw2',
                        tokenCredentialId: 'slack-notification')
                }
                // 테스트 코드 실패 시 슬랙 채널 ( #buildup-dev ) 로 실패 알림 발송
                failure {
                    slackSend(
                        channel: '#buildup-dev',
                        color: 'danger',
                        message: "Backend hyungdoyou/bootshelf-be:2.${BUILD_NUMBER} test failed.",
                        teamDomain: 'beyondsw2',
                        tokenCredentialId: 'slack-notification')
                }
            }
        }

        // 5. Docker 빌드
        stage('Docker Build') {
            when {
                expression { IS_FRONTEND_CHANGED == 'true' }
            }
            
            steps {
                script {
                    dir('frontend') {
                        sh 'docker build --tag hyungdoyou/bootshelf-fe:2.$BUILD_NUMBER .'   
                    }
                }
            }
            post {
                // Docker 빌드 성공 시 슬랙 채널 ( #buildup-dev ) 로 성공 알림 발송
                success {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'good', 
                        message: "Docker image hyungdoyou/bootshelf-fe:2.${BUILD_NUMBER} build success.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification')
                }
                // Docker 빌드 실패 시 슬랙 채널 ( #buildup-dev ) 로 실패 알림 발송
                failure {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'danger', 
                        message: "Docker image hyungdoyou/bootshelf-fe:2.${BUILD_NUMBER} build failed.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification')
                }
            }
        }

        // 6. Docker Push
        stage('Docker Push') {
            when {
                expression { IS_FRONTEND_CHANGED }
            }
            
            steps {
                script {
                    dir('frontend') {
                        // Docker 로그인
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_EMAIL', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh "docker login -u ${DOCKER_EMAIL} -p ${DOCKER_PASSWORD}"
                        }
                        // Docker Push
                        sh 'docker push hyungdoyou/bootshelf-fe:2.$BUILD_NUMBER'   
                    }
                }
            }
            post {
                // Docker Push 성공 시 슬랙 채널 ( #buildup-dev ) 로 성공 알림 발송
                success {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'good', 
                        message: "Docker image hyungdoyou/bootshelf-fe:2.${BUILD_NUMBER} push success.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification')
                }
                // Docker Push 실패 시 슬랙 채널 ( #buildup-dev ) 로 실패 알림 발송
                failure {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'danger', 
                        message: "Docker image hyungdoyou/bootshelf-fe:2.${BUILD_NUMBER} push failed.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification')
                }
            }
        }
        // 7. SSH 전송
        stage('SSH transfer') {
            when {
                expression { IS_FRONTEND_CHANGED }
            }
            
            steps {
                dir('frontend') {
                    // SSH 전송 플러그인 사용
                    sshPublisher(
                        continueOnError: false, // 오류 발생 시 진행을 멈춤
                        failOnError: true, // 오류 발생 시 파이프라인을 실패시킴
                        publishers: [
                            sshPublisherDesc(
                                configName: "k8s-master", // SSH 서버 설정 이름 지정 (master 노드)
                                verbose: true, // 자세한 출력 모드 활성화
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: "frontend-deployment.yml", // 전송할 파일 지정
                                        remoteDirectory: "/root/", // 원격 디렉토리 지정
                                        execCommand: '''
                                            sed -i "s/VERSION/$BUILD_ID/g" /root/frontend-deployment.yml
                                            kubectl apply -f /root/frontend-deployment.yml
                                        '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
            post {
                success {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'good', 
                        message: "frontend-deployment.yml transfer success.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification'
                    )
                }
                failure {
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'danger', 
                        message: "frontend-deployment.yml transfer failed.", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification'
                    )
                }
            }
        }
        // 8. 슬랙 알림
        stage('Slack Notification') {
            steps {
                script {
                    // 파이프라인 단계가 끝나고 슬랙으로 최종 알림 발송
                    slackSend(
                        channel: '#buildup-dev', 
                        color: 'good',
                        message: "Build version : ${env.BUILD_NUMBER} is finally successful!", 
                        teamDomain: 'beyondsw2', 
                        tokenCredentialId: 'slack-notification'
                        )
                }
            }
        }
    }
}